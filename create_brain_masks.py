# -*- coding: utf-8 -*-
"""create brain masks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-PlZB4b7dqFdvOb0nyrQ56HI_vWBEiw
"""

import numpy as np
import cv2
import json
import matplotlib.pyplot as plt
from PIL import Image
import os



f = open("/content/drive/MyDrive/HMRI_Images/mask_files/via_project_26Jun2025_10h27m (19).json", "r")
data = json.load(f)
print(type(data))

data = data["_via_img_metadata"]
# label = data("_via_attributes")

# for key, value in data.items():

#   if not value['regions']:
#     print(key)

data_items = list(data.items())
data_items = data_items[2:]

for (name1, value1), (name2, value2) in zip(data_items[::2],data_items[1::2]):
  print(f"{name1} {name2}")
  print(f"{value1} {value2}")
  break
print(len(data_items))

#single masks
import os
data_items = list(data.items())
dir = "/content/drive/MyDrive/HMRI_Images/brain/brain_images/"
num = 0

for name1, value1 in data_items:

    # if num == 33:
    #     break

    if not value1['regions']:
        continue

    filename1 = value1["filename"]
    img_path1 = os.path.join(dir, filename1)

    try:
        image1 = cv2.imread(img_path1, cv2.IMREAD_COLOR)
        if image1 is None:
            print(f"[ERROR] Could not open image {filename1}")
            continue
    except:
        print("Opening error")
        continue

    border_color = (0, 255, 0)  # green in BGR
    border_thickness = 20

    image1 = cv2.copyMakeBorder(
        image1, border_thickness, border_thickness, border_thickness, border_thickness,
        cv2.BORDER_CONSTANT, value=border_color
    )

    h, w = image1.shape[:2]
    mask = np.zeros((h, w), dtype=np.uint8)

    for region in value1['regions']:
        if region is None:
            print(f"[WARNING] Skipping a None region in {name1}")
            continue

        shape_attributes = region["shape_attributes"]
        if shape_attributes.get("name") != "polygon":
            continue

        all_x = shape_attributes["all_points_x"]
        all_y = shape_attributes["all_points_y"]

        # Offset for the added border
        points = np.array([[(x + border_thickness, y + border_thickness) for x, y in zip(all_x, all_y)]], dtype=np.int32)

        label = region["region_attributes"].get("region", "").strip().lower()

        if label in ("ltotal", "lefttotal"):
            color = 100
        elif label in ("rtotal", "righttotal"):
            color = 150
        elif label == "target":
            color = 255
        elif label in ("none", ""):
            color = 0
        else:
            color = 0
            print(f"[WARNING] Unrecognized label '{label}' in {filename1}")

        # ✅ Draw the polygon
        cv2.fillPoly(mask, points, color)

    # Visualization (optional)
    mask_rgb = cv2.cvtColor(mask, cv2.COLOR_GRAY2RGB)
    plt.figure(figsize=(12, 6))
    plt.imshow(mask_rgb)
    plt.axis('off')
    plt.show()

    # Save grayscale mask
    out_path = f"/content/drive/MyDrive/HMRI_Images/brain/brain_masks/{filename1}"
    cv2.imwrite(out_path, mask)
    print(f"{num}: wrote {filename1}")
    num += 1

##creating double masks
import os
data_items = list(data.items())
data_items = data_items[1:]
dir = "/content/drive/MyDrive/HMRI_Images/brain/brain_images_pngs/"
num=0
for (name1, value1), (name2, value2) in zip(data_items[::2],data_items[1::2]):
  num=num+1
  if num == 0:
    continue

  if num == 33:
    break
  if not value1['regions'] or not value2['regions']:
    break


  filename1 = value1["filename"]
  img_path1 = dir + filename1
  filename2 = value2["filename"]
  img_path2 = dir + filename2
  try:
    image1 = cv2.imread(img_path1, cv2.IMREAD_COLOR)
    image2 = cv2.imread(img_path2, cv2.IMREAD_COLOR)
  except:
    print("opening error")
    continue

  # print(f"{filename} {image.shape} {len(value['regions'])}")
  h,w = image1.shape[:2]
  if image1.shape != image2.shape:
    image2 = cv2.resize(image2, (w,h))

  border_color = (0, 255, 0)  # green border in BGR
  border_thickness = 20        # pixels

  # Add borders around each image
  image1 = cv2.copyMakeBorder(
      image1, border_thickness, border_thickness, border_thickness, border_thickness,
      cv2.BORDER_CONSTANT, value=border_color
  )

  image2 = cv2.copyMakeBorder(
      image2, border_thickness, border_thickness, border_thickness, border_thickness,
      cv2.BORDER_CONSTANT, value=border_color
  )

  combined = np.concatenate((image1, image2), axis=1)

  # combined = cv2.cvtColor(combined, cv2.COLOR_BGR2RGB)
  plt.figure(figsize=(12, 6))
  plt.title(f"{filename1} + {filename2}")
  plt.imshow(combined)
  plt.axis('off')
  # plt.show()



  mask1 = np.zeros((h,w), dtype=np.uint8)
  for region in value1['regions']:
    if region is None:
        print(f"[WARNING] Skipping a None region in {name1}")
        continue
    shape_attributes = region["shape_attributes"]
    if shape_attributes.get("name") != "polygon":
        continue
    points =  list(zip(shape_attributes["all_points_x"], shape_attributes["all_points_y"]))
    label = region["region_attributes"].get("region", "").strip()

    if label == "ltotal" or label == "lefttotal":
        color = 100
    elif label == "rtotal" or label == "righttotal":
        color = 150
    elif label == "total":
        print("didnt identify left or right for total")
    elif label == "target":
        color = 255
    elif label == "none" or label =="None":
        color = 0
    else:
        color = 0
        print(f"something wrong in {filename1}")
        print(label)



    contours = []
    for x,y in points:
      contours.append([x,y])

    contours = np.array(contours)
    cv2.drawContours(mask1, [contours], -1, color, -1)

  mask2 = np.zeros((h,w), dtype=np.uint8)
  for region in value2['regions']:
    if region is None:
        print(f"[WARNING] Skipping a None region in {name2}")
        continue
    shape_attributes = region["shape_attributes"]
    if shape_attributes.get("name") != "polygon":
        continue
    points =  list(zip(shape_attributes["all_points_x"], shape_attributes["all_points_y"]))
    label = region["region_attributes"].get("region", "").strip()


    if label == "ltotal" or label == "lefttotal":
        color = 100
    elif label == "rtotal" or label == "righttotal":
        color = 150
    elif label == "total":
        print("didnt identify left or right for total")
    elif label == "target":
        color = 255
    elif label == "none" or label =="None":
        color = 0
    else:
        color = 0
        print(f"something wrong in {filename2}")
        print(label)



    contours = []
    for x,y in points:
      contours.append([x,y])

    contours = np.array(contours)
    cv2.drawContours(mask2, [contours], -1, color, -1)

  combined_mask = np.concatenate((mask1, mask2), axis=1)
  combined_mask = cv2.cvtColor(combined_mask, cv2.COLOR_BGR2RGB)
  plt.figure(figsize=(12, 6))
  # plt.title(f"{} + {}")
  plt.imshow(combined_mask)
  plt.axis('off')
  plt.show()
  cv2.imwrite(f"/content/drive/MyDrive/HMRI_Images/brain/brain_images_doubles/{filename1}+{filename2}", combined)

  cv2.imwrite(f"/content/drive/MyDrive/HMRI_Images/brain/brain_masks_doubles/{filename1}+{filename2}", combined_mask)
  print(f"{num}: wrote {filename1} + {filename2}")

import matplotlib.pyplot as plt

# plt.imshow(mask, cmap="nipy_spectral")
plt.title("Class Mask")
plt.imshow(mask * 100, cmap="gray")

import os
from PIL import Image

img_dir = "/content/drive/MyDrive/HMRI_Images/brain/brain_images"
mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/brain_masks"

files = sorted(os.listdir(img_dir))
files = files[32:]
# temp_files = aug_clean_files[:100]
# aug_clean_files = temp_files
total_size = len(files)
# total_size = 100
val_size = int(0.2 * total_size)
print(f"val size: {val_size}")
train_size = total_size - val_size
print(f"train size: {train_size}")
from torch.utils.data import random_split

train_list, val_list = random_split(files, [train_size, val_size])

# for img in train_list:
#   path = os.path.join(aug_img_dir, img)
#   mask_path = os.path.join(aug_mask_dir, img)
#   mask = Image.open(mask_path)
#   plt.imshow(mask, cmap='gray')
#   plt.title(img)
#   plt.axis('off')
#   plt.show()

"""##create augmentation type"""

import albumentations as A

augment = A.Compose(
    [
        A.Rotate(limit=50, p=1),
        A.RandomScale(scale_limit=0.6, p=0.5),
        #A.Resize(height=866, width=1356),
    ]
)

if os.path.exists("/content/drive/MyDrive/HMRI_Images/brain/brain_images_pngs/IMG_7225.tif done 2nd_page1.png"):
    print("✅ Path exists!")
else:
    print("❌ Path does not exist.")

"""##augments each single image"""

aug_img_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_img_single"
aug_mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_mask_single"
img_dir = "/content/drive/MyDrive/HMRI_Images/brain/brain_images_pngs"
mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/brain_masks"
files = sorted(os.listdir(img_dir))

os.makedirs(img_dir, exist_ok=True)
os.makedirs(mask_dir, exist_ok=True)
resize_size = (2700,1600)


num=0
for img_name in (files):
    print(img_name)
    img_path = os.path.join(img_dir, img_name)
    mask_path = os.path.join(mask_dir, img_name)

    # Load
    image = Image.open(img_path).convert("RGB")
    print(f"image size: {image.size}")
    image = image.resize(resize_size, resample=Image.BILINEAR)
    image = np.array(image)

    mask = Image.open(mask_path).convert("L")
    mask = mask.resize(resize_size, resample=Image.NEAREST)  # Use NEAREST for masks!
    mask = np.array(mask)


    mask = Image.fromarray(mask)
    mask = mask.resize((image.shape[1], image.shape[0]), resample=Image.NEAREST)
    mask = np.array(mask)


    # Save 10 augmented versions
    for i in range(10):
        # print(f"image.shape: {image.shape}")
        # print(f"mask.shape: {mask.shape} ")
        augmented = augment(image=image, mask=mask)
        aug_img = Image.fromarray((augmented["image"]).astype(np.uint8))
        aug_mask = Image.fromarray((augmented["mask"]).astype(np.uint8))

        aug_img = aug_img.resize(resize_size, resample=Image.BILINEAR)
        aug_mask = aug_mask.resize(resize_size, resample=Image.NEAREST)

        base_name = os.path.splitext(img_name)[0]
        aug_img.save(os.path.join(aug_img_dir, f"{base_name}_aug{i}.png"))
        aug_mask.save(os.path.join(aug_mask_dir, f"{base_name}_aug{i}.png"))

    mask_img = Image.fromarray(mask.astype(np.uint8))
    mask_img.save(os.path.join(aug_mask_dir, f"{img_name}"))
    img_path = os.path.join(img_dir, img_name)
    img_resized = Image.fromarray(image.astype(np.uint8))
    img_resized.save(os.path.join(aug_img_dir, f"{img_name}"))

    print(f"{num}: saved {img_name}")
    num = num+1

aug_mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_masks_doubles"
masks = os.listdir(aug_mask_dir)
print(len(masks))
# for n in masks:
#   img_path = os.path.join(aug_mask_dir, n)
#   image = cv2.imread(img_path, cv2.IMREAD_COLOR)
#   print(f"{n} {image.shape}")

"""##creating double images"""

double_img_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_img_doubles"
double_mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_mask_doubles"

img_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_img_single"
mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_mask_single"
files = sorted(os.listdir(img_dir))[22:]
front = []
back = []
resize_size = (2700,1600)

for n in files[:22]:
  print(n)




side = True
count=0
for f in files:
  count=count+1
  if "klsm030624195" in f:
    break
  if side:
    front.append(f)
  else:
    back.append(f)
  if count == 11:
    side = not side
    count=0

print(len(front))
print(len(back))

index=0
for (name1), (name2) in zip(front, back):
    index+=1
    img_path1 = os.path.join(img_dir, name1)
    img_path2 = os.path.join(img_dir, name2)

    image1 = cv2.imread(img_path1, cv2.IMREAD_COLOR)
    image2 = cv2.imread(img_path2, cv2.IMREAD_COLOR)

    if image1.shape[:2] != resize_size[::-1]:
        image1 = cv2.resize(image1, resize_size, interpolation=cv2.INTER_LINEAR)
    if image2.shape[:2] != resize_size[::-1]:
        image2 = cv2.resize(image2, resize_size, interpolation=cv2.INTER_LINEAR)



    border_color = (0, 255, 0)  # green in BGR
    border_thickness = 20

    image1 = cv2.copyMakeBorder(
        image1, border_thickness, border_thickness, border_thickness, border_thickness,
        cv2.BORDER_CONSTANT, value=border_color
    )
    image2 = cv2.copyMakeBorder(
        image2, border_thickness, border_thickness, border_thickness, border_thickness,
        cv2.BORDER_CONSTANT, value=border_color
    )

    combined = np.concatenate((image1, image2), axis=1)

    output_filename = f"{name1}+{name2}"
    output_path = os.path.join(double_img_dir, output_filename)

    cv2.imwrite(output_path, combined)

    mask_path1 = os.path.join(mask_dir, name1)
    mask_path2 = os.path.join(mask_dir, name2)

    mask1 = cv2.imread(mask_path1, cv2.IMREAD_UNCHANGED)
    mask2 = cv2.imread(mask_path2, cv2.IMREAD_UNCHANGED)

    mask2[mask2 == 150] = 155
    mask2[mask2 == 100] = 150
    mask2[mask2 == 155] = 100


    combined = np.concatenate((mask1, mask2), axis=1)

    output_path = os.path.join(double_mask_dir, output_filename)

    cv2.imwrite(output_path, combined)
    print(f"Saved: {output_filename}")

aug_img_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_img_doubles"
aug_mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_masks_doubles"

# List of files to delete
files_to_delete  = [
    "Saved: IMG_7315.tif done.png+IMG_7315.tif done_aug0.png",
    "Saved: IMG_7315.tif done_aug1.png+IMG_7315.tif done_aug2.png",
    "Saved: IMG_7315.tif done_aug3.png+IMG_7315.tif done_aug4.png",
    "Saved: IMG_7315.tif done_aug5.png+IMG_7315.tif done_aug6.png",
    # add all your lines here...
]

# Delete each file if it exists
for filename in files_to_delete:
    path = os.path.join(aug_mask_dir, filename)
    if os.path.exists(path):
        os.remove(path)
        print(f"Deleted: {filename}")
    else:
        print(f"Not found: {filename}")

aug_mask_dir = "/content/drive/MyDrive/HMRI_Images/brain/aug_img_doubles"
masks = os.listdir(aug_mask_dir)
print(len(masks))
for n in masks:
  img_path = os.path.join(aug_mask_dir, n)
  image = cv2.imread(img_path, cv2.IMREAD_COLOR)
  print(f"{n} {image.shape}")
  break